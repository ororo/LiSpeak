#!/bin/bash

   # This program is free software: you can redistribute it and/or modify
   #  it under the terms of the GNU General Public License as published by
   #  the Free Software Foundation, either version 3 of the License, or
   #  (at your option) any later version.

   #  This program is distributed in the hope that it will be useful,
   #  but WITHOUT ANY WARRANTY; without even the implied warranty of
   #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   #  GNU General Public License for more details.

   #  You should have received a copy of the GNU General Public License
   #  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#
# Usage: recognize "Text to be recognized"
#

if [ -z "$2" ]
  then
    dicmode="reg"
  else
    dicmode="$2"
fi
echo $dicmode

cd /opt/lispeak

USER_DIR=$HOME/.lispeak

while read line           
do
  if [ ! "${line:0:1}" = "#" ];then
	export "$line"
  fi
done <$USER_DIR/UserInfo

# Try to run a command in ./Recognition/bin with useful errors.
# This routine assumes $1 is not empty
function run_command() {
    eval "./Recognition/recognized.py \"$1\" \"$2\""
    
    eval "./Recognition/bin/$2"

    if [ $? != 0 ];then
        eval "~/.lispeak/bin/$2"
    fi

    if [ $? != 0 ];then
	./Recognition/bin/result Error "There was an error while running:" \
	"$1" ""
	exit 1
    fi
}

cd $ROOTDIR

speech=$(eval "echo \"$1\" | tr '[:upper:]' '[:lower:]'")

if [ $dicmode = "reg" ]; then

    read mode < "$USER_DIR/MODE"

    if [ -z "$mode" ]; then
        mode="main"
    fi

    echo "MODE IS: $mode"

    if [ $mode = "main" ]; then

        # Use sed scripts here.
        if [ -z "$speech" ];then
            echo "Speech unable to be transcribed."
            ./Recognition/bin/result Error "Speech unable to be transcribed"
            exit 1
        fi

        rm Microphone/result 2>/dev/null


        if [ -e "$USER_DIR/personal.dic" ];then
            COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/personal.dic")

            EXIT=$?
            if [ "$EXIT" == 0 ];then

	        run_command "$speech" "$COMMAND"

	        exit 0
            fi
            if [ "$EXIT" != 2 ];then
	        echo "There is an error in $USER_DIR/personal.dic"
            fi
        fi

        process=$(ps -p `xdotool getwindowfocus getwindowpid` -o comm= |tr -d '\n')
        echo ${process}
        if [ -e "$USER_DIR/dictionaries/${process}.dic" ];then
            COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/dictionaries/${process}.dic")

            EXIT=$?
            if [ "$EXIT" == 0 ];then

	        run_command "$speech" "$COMMAND"

	        exit 0
            fi
            if [ "$EXIT" != 2 ];then
	        echo "There is an error in $USER_DIR/dictionaries/${process}.dic"
            fi
        fi

        if [ -e "$USER_DIR/plugins.dic" ];then
            COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/plugins.dic")

            EXIT=$?
            if [ "$EXIT" == 0 ];then

	        run_command "$speech" "$COMMAND"

	        exit 0
            fi
            if [ "$EXIT" != 2 ];then
	        echo "There is an error in $USER_DIR/plugins.dic"
            fi
        fi

        if [ ! -e "$USER_DIR/modes/main.dic" ];then
           echo "Installation error: main.dic not found"
           exit 5
        fi
        
        COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/modes/main.dic")

        EXIT=$?

        if [ "$EXIT" == 0 ];then
            if [ ! -z "$COMMAND" ];then
                run_command "$speech" "$COMMAND"
                exit 0
            else
                exit 7
            fi
        elif [ "$EXIT" == 2 ];then
            ./Recognition/bin/result Error "'$speech'" "is not a recognized command" ""

        else 
            echo "There is an error in ${mode}.dic"
            ./Recognition/bin/result Error "There was an error while reading main.dic" \
	        "$COMMAND" ""
        fi
    else

        COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/modes/$mode.dic")

        EXIT=$?

        if [ "$EXIT" == 0 ];then
            run_command "$speech" "$COMMAND"
            exit 0
        elif [ "$EXIT" == 2 ];then
            ./Recognition/bin/result Error "'$speech'" "is not a recognized command" ""

        else 
            echo "There is an error in ${mode}.dic"
            ./Recognition/bin/result Error "There was an error while reading $mode" \
	        "$COMMAND" ""
        fi
    fi
else
    COMMAND=$(./Recognition/dictionary "$speech" "$USER_DIR/modes/$dicmode.dic")
    
    EXIT=$?
    if [ "$EXIT" == 0 ];then
        run_command "$speech" "$COMMAND"
        exit 0
    elif [ "$EXIT" == 2 ];then
        ./Recognition/bin/result Error "'$speech'" "is not a recognized command" ""

    else 
        echo "There is an error in ${mode}.dic"
        ./Recognition/bin/result Error "There was an error while reading $mode" \
        "$COMMAND" ""
    fi
fi
