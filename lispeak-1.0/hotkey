#!/bin/bash

   # This program is free software: you can redistribute it and/or modify
   #  it under the terms of the GNU General Public License as published by
   #  the Free Software Foundation, either version 3 of the License, or
   #  (at your option) any later version.

   #  This program is distributed in the hope that it will be useful,
   #  but WITHOUT ANY WARRANTY; without even the implied warranty of
   #  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   #  GNU General Public License for more details.

   #  You should have received a copy of the GNU General Public License
   #  along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TODO
# Look for CONFIG file to see if it has SOUND or VISUAL set
# And display accordingly

cd /opt/lispeak

FILEFOLDER=/tmp/lispeak_$(id -un)
mkdir -p $FILEFOLDER
PIDFILE=$FILEFOLDER/speech.pid
FLACFILE=$FILEFOLDER/speech.flac

shopt -s nullglob

for f in $HOME/.lispeak/services/*.service
do
    echo $f
    base=$(basename $f)
	if ps auxww |grep -v grep |grep $base > /dev/null 2>&1;then
        : # we are good, the server is there
    else # otherwise start it
        $f 2>/dev/null & 
	echo $! > $FILEFOLDER/$base.pid
    fi 
done

if ps auxww |grep -v grep |grep notify.py > /dev/null 2>&1;then
    : # we are good, the server is there
else # otherwise start it
    ./Microphone/notify.py 2>/dev/null & 
    echo $! > $FILEFOLDER/notify.pid
fi  
if ps auxww |grep -v grep |grep indicator_server.py > /dev/null 2>&1;then
    : # we are good, the server is there
else # otherwise start it
    ./Microphone/indicator_server.py 2>/dev/null &
    echo $! > $FILEFOLDER/indicator.pid
    echo $!
fi 

if [ -e $PIDFILE ];then
    read PID_OF_SPEECH < $PIDFILE
    sleep .1 # This is so the end of the speech doesn't get cut off.
    kill $PID_OF_SPEECH

    ./pycmd wait
    while kill -s 0 $PID_OF_SPEECH 2>/dev/null;do
    :
    done
    RESULT="$(./send_speech ${FLACFILE})"
    ./recognize "$RESULT"
    #bash -x    ./recognize "$RESULT"    #DEBUG

    # Only takes effect if a script did not use pycmd result
    #if [ ! -e "Microphone/result" ];then
	./pycmd done
    #fi

    rm -f $PIDFILE
else
    ./pycmd stop
    > $FLACFILE

    #ORIGINAL VERSION:
    rec -r 16000 -q -b 16 $FLACFILE 2>/dev/null & echo $! > $PIDFILE
    
    #BETA VERSION
    #parameters may depend on microphone and language :(
    #SOX_SILENCE_THRESHOLD="-32d"          #DON'T use %
    #SOX_MIN_DURATION=0.1
    #SOX_MIN_SILENCE_DURATION=0.7
    #rec -q -r 16000 $FLACFILE silence 1 0.1 $SOX_SILENCE_THRESHOLD & echo $! > $PIDFILE

    #BETA VERSION: continuous speech
    #(rec -q -p silence 1 0.1 $SOX_SILENCE_THRESHOLD & echo $! > $PIDFILE) | sox -p -r 16000 -b 16 $FLACFILE silence 1 0.1 $SOX_SILENCE_THRESHOLD 1 0.7 $SOX_SILENCE_THRESHOLD : newfile : restart &
    
    # Checks when recording starts
    #while [ "$(stat -c%s speech.flac)" == "0" ];do
    #	:
    #done
    ./pycmd record
fi
